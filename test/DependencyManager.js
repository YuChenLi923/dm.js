// Generated by CoffeeScript 1.6.3
(function() {
  var DependencyManager, assert, chance, sinon, _;

  _ = require('lodash');

  chance = require('chance');

  sinon = require('sinon');

  assert = require('chai').assert;

  DependencyManager = require('../src/DependencyManager.js');

  chance = new chance;

  suite("DependencyManager.js", function() {
    var randomPrimitivesHash;
    randomPrimitivesHash = function() {
      return _.reduce(new Array(chance.natural({
        min: 10,
        max: 100
      })), function(rnd) {
        rnd[chance.word()] = chance.integer();
        rnd[chance.word()] = chance.string();
        rnd[chance.word()] = chance.bool();
        return rnd;
      }, {});
    };
    setup(function() {});
    suite("#setConfig", function() {
      var DM, config, parameters;
      DM = null;
      config = null;
      parameters = null;
      setup(function() {
        DM = new DependencyManager;
        config = randomPrimitivesHash();
        return parameters = randomPrimitivesHash();
      });
      test("Should set config without errors", function() {
        var err, error;
        try {
          DM.setConfig(config, parameters);
        } catch (_error) {
          err = _error;
          error = err;
        }
        return assert.isUndefined(error);
      });
      test("Should throw Error if nothing given", function() {
        var err, error;
        try {
          DM.setConfig();
        } catch (_error) {
          err = _error;
          error = err;
        }
        return assert.instanceOf(error, Error);
      });
      return test("Should throw Error when configuring twice", function() {
        var err, error;
        DM.setConfig(config);
        try {
          DM.setConfig(randomPrimitivesHash());
        } catch (_error) {
          err = _error;
          error = err;
        }
        return assert.instanceOf(error, Error);
      });
    });
    suite("#getConfig", function() {
      var DM, config, parameters;
      DM = null;
      config = null;
      parameters = null;
      setup(function() {
        DM = new DependencyManager;
        config = randomPrimitivesHash();
        return parameters = randomPrimitivesHash();
      });
      return test("Should return not exact copy of config", function() {
        var copy;
        DM.setConfig(config, parameters);
        copy = DM.getConfig();
        assert.notEqual(config, copy, "Must not be equal objects");
        _.each(copy, function(value, key) {
          return assert.strictEqual(config[key], value, "Config values must be strict equal");
        });
        return _.each(parameters, function(value, key) {
          return assert.strictEqual(value, DM.getParameter(key), "Parameters values must be strict equal");
        });
      });
    });
    suite("#setParameter", function() {
      var DM, parameters;
      DM = null;
      parameters = null;
      setup(function() {
        DM = new DependencyManager;
        return parameters = randomPrimitivesHash();
      });
      test("Should set parameter", function() {
        _.each(parameters, function(value, key) {
          return DM.setParameter(key, value);
        });
        return _.each(parameters, function(value, key) {
          return assert.strictEqual(value, DM.getParameter(key), "Parameters values must be strict equal");
        });
      });
      return test("Should throw Error when parameter is already set", function() {
        var err, error, key, value;
        key = chance.word();
        value = chance.word();
        DM.setParameter(key, value);
        try {
          DM.setParameter(key, chance.word());
        } catch (_error) {
          err = _error;
          error = err;
        }
        return assert.instanceOf(error, Error);
      });
    });
    suite("#getParameter", function() {
      var DM, parameters;
      DM = null;
      parameters = null;
      setup(function() {
        DM = new DependencyManager;
        return parameters = randomPrimitivesHash();
      });
      test("Should get parameter", function() {
        _.each(parameters, function(value, key) {
          return DM.setParameter(key, value);
        });
        return _.each(parameters, function(value, key) {
          return assert.strictEqual(value, DM.getParameter(key), "Parameters values must be strict equal");
        });
      });
      return test("Shoul return null, when parameter is not set", function() {
        var value;
        value = DM.getParameter(chance.word());
        return assert.isNull(value);
      });
    });
    suite("#parseString", function() {
      var DM;
      DM = null;
      setup(function() {
        return DM = new DependencyManager;
      });
      test("Should throw Error when nothing is given", function() {
        var err, error;
        try {
          DM.parseString();
        } catch (_error) {
          err = _error;
          error = err;
        }
        return assert.instanceOf(error, Error);
      });
      test("Should parse as parameter", function() {
        var key, mock, result, string, value;
        key = chance.word();
        string = "%" + key + "%";
        value = chance.word();
        mock = sinon.mock(DM).expects("getParameter").on(DM).once().withExactArgs(key).returns(value);
        result = DM.parseString(string);
        mock.verify();
        return assert.strictEqual(result, value);
      });
      test("Should parse as service", function() {
        var key, mock, result, string, value;
        key = chance.word();
        string = "@" + key;
        value = chance.word();
        mock = sinon.mock(DM).expects("get").on(DM).once().withExactArgs(key).returns(value);
        result = DM.parseString(string);
        mock.verify();
        return assert.strictEqual(result, value);
      });
      test("Should parse as resource with handler", function() {
        var handler, mock, resource, result, string, value;
        handler = chance.word();
        resource = chance.word();
        string = "#" + handler + "!" + resource + "#";
        value = chance.word();
        mock = sinon.mock(DM).expects("getResource").on(DM).once().withExactArgs(resource, handler).returns(value);
        result = DM.parseString(string);
        mock.verify();
        return assert.strictEqual(result, value);
      });
      return test("Should parse as resource without handler", function() {
        var mock, resource, result, string, value;
        resource = chance.word();
        string = "#" + resource + "#";
        value = chance.word();
        mock = sinon.mock(DM).expects("getResource").on(DM).once().withArgs(resource).returns(value);
        result = DM.parseString(string);
        mock.verify();
        return assert.strictEqual(result, value);
      });
    });
    suite("#parse", function() {
      var DM;
      DM = null;
      return setup(function() {
        return DM = new DependencyManager;
      });
    });
    suite("#getResource", function() {
      var DM;
      DM = null;
      return setup(function() {
        return DM = new DependencyManager;
      });
    });
    suite("#initialize", function() {
      var DM;
      DM = null;
      return setup(function() {
        return DM = new DependencyManager;
      });
    });
    suite("#build", function() {
      var DM;
      DM = null;
      return setup(function() {
        return DM = new DependencyManager;
      });
    });
    return suite("#get", function() {
      var DM;
      DM = null;
      return setup(function() {
        return DM = new DependencyManager;
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=DependencyManager.map
*/
